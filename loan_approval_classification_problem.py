# -*- coding: utf-8 -*-
"""loan-approval-classification problem

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q8vRfw-X3tI3kQpPb6qeQHEoAlqQqBoB
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
uploaded = files.upload()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.metrics import classification_report
df = pd.read_csv('loan_data.csv')

print(df.head())

df.drop(columns=['person_gender', 'person_education', 'cb_person_cred_hist_length', 'person_emp_exp'], inplace=True)

import seaborn as sns
import matplotlib.pyplot as plt
print(df.isna().sum())
duplicates = df.duplicated()
print("Number of duplicate rows:", duplicates.sum())
df.drop_duplicates(inplace=True)
print(df[duplicates].sum())
numerical_features = df.select_dtypes(include=['float64', 'int64']).columns
df[numerical_features].boxplot(figsize=(15, 8))
plt.title("Box Plot of Numerical Features")
plt.xticks(rotation=45, ha='right')
plt.ylabel("Value Range")
plt.show()

le_person_home_ownership = LabelEncoder()
le_loan_intent = LabelEncoder()
le_previous_loan_defaults_on_file = LabelEncoder()
df["person_home_ownership_Encoded"] = le_person_home_ownership.fit_transform(df["person_home_ownership"])
df["loan_intent_Encoded"] = le_loan_intent.fit_transform(df["loan_intent"])
df["previous_loan_defaults_on_file_Encoded"] = le_previous_loan_defaults_on_file.fit_transform(df["previous_loan_defaults_on_file"])
df.drop(columns=[ 'person_home_ownership', 'loan_intent',
                 'previous_loan_defaults_on_file'], inplace=True)

mean_income = df['person_income'].mean()
Q1=df['person_income'].quantile(0.25)
Q3=df['person_income'].quantile(0.75)
IQR=Q3-Q1
lower_bound=Q1-1.5*IQR
upper_bound=Q3+1.5*IQR
df['person_income']=np.where((df['person_income'] < lower_bound) |
                               (df['person_income'] > upper_bound),
                               mean_income,
                               df['person_income'])
print(df['person_income'].describe())
mean_income = df['loan_amnt'].mean()
df['loan_amnt']=np.where((df['loan_amnt'] < lower_bound) |
                               (df['loan_amnt'] > upper_bound),
                               mean_income,
                               df['loan_amnt'])
print(df['loan_amnt'].describe())

X=df.drop('loan_status', axis=1)
Y=df['loan_status']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=0)
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix,accuracy_score
from sklearn.neighbors import KNeighborsClassifier

model=LogisticRegression(max_iter=10000,random_state=0)

model.fit(X_train, Y_train)
Y_pred = model.predict(X_test)
val=pd.DataFrame({
    'actual': Y_test,
    'predicted':Y_pred
})

y_train_pred = model.predict(X_train)
print("Training Accuracy:",'%.2f'% accuracy_score(Y_train, y_train_pred))
y_test_pred = model.predict(X_test)
print("Testing Accuracy:",'%.2f'% accuracy_score(Y_test, y_test_pred))

print(val.head(35))

print('logistic regression results: \n')
print("Accuracy:", '%.2f'% accuracy_score(Y_test, Y_pred))
print("Confusion Matrix:\n", confusion_matrix(Y_test, Y_pred))
print(classification_report(Y_test, Y_pred))

from sklearn.naive_bayes import GaussianNB
model=GaussianNB()
model.fit(X_train,Y_train)
Y_pred = model.predict(X_test)
y_train_pred = model.predict(X_train)
print('GussianNB results: \n')
print("Training Accuracy:",'%.2f'% accuracy_score(Y_train, y_train_pred))
y_test_pred = model.predict(X_test)
print("Testing Accuracy:",'%.2f'% accuracy_score(Y_test, y_test_pred))
print("Accuracy:", '%.2f'%accuracy_score(Y_test, Y_pred))
print("Confusion Matrix:\n", confusion_matrix(Y_test, Y_pred))
print(classification_report(Y_test, Y_pred))

from sklearn import neighbors
model=neighbors.KNeighborsClassifier(n_neighbors=25)
model.fit(X_train,Y_train)
Y_pred = model.predict(X_test)
y_train_pred = model.predict(X_train)
print('KNN results: \n')
print("Training Accuracy:",'%.2f'% accuracy_score(Y_train, y_train_pred))
y_test_pred = model.predict(X_test)
print("Testing Accuracy:",'%.2f'% accuracy_score(Y_test, y_test_pred))
print("Accuracy:",'%.2f'% accuracy_score(Y_test, Y_pred))
print("Confusion Matrix:\n", confusion_matrix(Y_test, Y_pred))
print(classification_report(Y_test, Y_pred))